/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.patcher.UI;

import org.patcher.core.AppContext;
import org.patcher.dto.viewmodels.FontDTO;
import org.patcher.dto.viewmodels.FontFamilyDTO;
import org.patcher.enums.FontTypeEnum;
import org.patcher.utility.Constants;
import org.patcher.utility.PropertyUtil;
import org.patcher.utility.UIUtils;
import org.patcher.utility.Util;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.Arrays;

/**
 *
 * @author Yasin
 */
public class FontDialog extends javax.swing.JFrame {


    private final ParentFrame parentFrame;

    /**
     * Creates new form FontDialog
     */
    public FontDialog(ParentFrame parent) {
        this.parentFrame = parent;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        browseBtnReg = new javax.swing.JButton();
        browseBtnItl = new javax.swing.JButton();
        browseBtnBoldItl = new javax.swing.JButton();
        browseBtnBold = new javax.swing.JButton();
        regFontPathField = new javax.swing.JTextField();
        italicFontPathField = new javax.swing.JTextField();
        boldFontPathField = new javax.swing.JTextField();
        regularPdfFontNameField = new javax.swing.JTextField();
        boldItlFontPathField = new javax.swing.JTextField();
        boldPdfFontNameField = new javax.swing.JTextField();
        italicPdfFontNameField = new javax.swing.JTextField();
        boldItalicPdfFontNameField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        fontPdfEmbedded = new javax.swing.JCheckBox();
        okBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        fontFamilyNameFld = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        jButton6.setText("OK");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("REGULAR TTF");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("BOLD TTF");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("ITALIC TTF");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("BOLD ITALIC TTF");

        browseBtnReg.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        browseBtnReg.setText("BROWSE");
        browseBtnReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnRegActionPerformed(evt);
            }
        });

        browseBtnItl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        browseBtnItl.setText("BROWSE");
        browseBtnItl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnItlActionPerformed(evt);
            }
        });

        browseBtnBoldItl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        browseBtnBoldItl.setText("BROWSE");
        browseBtnBoldItl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnBoldItlActionPerformed(evt);
            }
        });

        browseBtnBold.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        browseBtnBold.setText("BROWSE");
        browseBtnBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnBoldActionPerformed(evt);
            }
        });

        regFontPathField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        
        italicFontPathField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        boldFontPathField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        regularPdfFontNameField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        

        boldItlFontPathField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        

        boldPdfFontNameField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        
        italicPdfFontNameField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        
        boldItalicPdfFontNameField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        boldItalicPdfFontNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldItalicPdfFontNameFieldActionPerformed(evt);
            }
        });
        

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setText("PDF FONT NAME");

        fontPdfEmbedded.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        fontPdfEmbedded.setText("IS PDF EMBEDDED");

        okBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        okBtn.setText("OK");
        okBtn.setEnabled(false);
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        cancelBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        cancelBtn.setText("CANCEL");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setText("FONT FAMILY");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fontPdfEmbedded, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(regFontPathField))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(boldItlFontPathField, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                                    .addComponent(italicFontPathField)
                                    .addComponent(boldFontPathField))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(browseBtnBoldItl)
                                    .addComponent(browseBtnItl, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(browseBtnBold, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(browseBtnReg, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(regularPdfFontNameField)
                                    .addComponent(boldPdfFontNameField)
                                    .addComponent(italicPdfFontNameField)
                                    .addComponent(boldItalicPdfFontNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(fontFamilyNameFld))))
                .addGap(7, 7, 7))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(browseBtnReg, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regFontPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regularPdfFontNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(browseBtnBold, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boldFontPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boldPdfFontNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(browseBtnItl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(italicFontPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(italicPdfFontNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(boldItlFontPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(boldItalicPdfFontNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(browseBtnBoldItl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontFamilyNameFld, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fontPdfEmbedded, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );
        
        class TextChangeListener implements DocumentListener {
            @Override
            public void insertUpdate(DocumentEvent e) { validateFields(); }
            @Override
            public void removeUpdate(DocumentEvent e) { validateFields(); }
            @Override
            public void changedUpdate(DocumentEvent e) { validateFields(); }
        }

        regFontPathField.getDocument().addDocumentListener(new TextChangeListener());
        regularPdfFontNameField.getDocument().addDocumentListener(new TextChangeListener());

        boldFontPathField.getDocument().addDocumentListener(new TextChangeListener());
        boldPdfFontNameField.getDocument().addDocumentListener(new TextChangeListener());

        italicFontPathField.getDocument().addDocumentListener(new TextChangeListener());
        italicPdfFontNameField.getDocument().addDocumentListener(new TextChangeListener());

        boldItlFontPathField.getDocument().addDocumentListener(new TextChangeListener());
        boldItalicPdfFontNameField.getDocument().addDocumentListener(new TextChangeListener());

        fontFamilyNameFld.getDocument().addDocumentListener(new TextChangeListener());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseBtnRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnRegActionPerformed
        String newFile = UIUtils.openFileDialog(this);
        if (PropertyUtil.isFileAllowed(newFile, true)) {
            regFontPathField.setText(newFile);
        }
    }//GEN-LAST:event_browseBtnRegActionPerformed

    private void browseBtnBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnBoldActionPerformed
        String newFile = UIUtils.openFileDialog(this);
        if (PropertyUtil.isFileAllowed(newFile, true)) {
            boldFontPathField.setText(newFile);
        }
    }//GEN-LAST:event_browseBtnBoldActionPerformed

    private void italicPdfFontNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicPdfFontNameFieldActionPerformed

    }//GEN-LAST:event_italicPdfFontNameFieldActionPerformed

    private void boldItalicPdfFontNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldItalicPdfFontNameFieldActionPerformed

    }//GEN-LAST:event_boldItalicPdfFontNameFieldActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        FontFamilyDTO fontFamilyDTO = new FontFamilyDTO();

        fontFamilyDTO.setFontFamilyName(fontFamilyNameFld.getText());

        FontDTO regular = new FontDTO();
        regular.setType(FontTypeEnum.REGULAR);
        regular.setPdfFontName(regularPdfFontNameField.getText());
        regular.setTtfFile(regFontPathField.getText());


        FontDTO bold = new FontDTO();
        bold.setType(FontTypeEnum.BOLD);
        bold.setPdfFontName(boldPdfFontNameField.getText());
        bold.setTtfFile(boldFontPathField.getText());


        FontDTO italic = new FontDTO();
        italic.setType(FontTypeEnum.ITALIC);
        italic.setPdfFontName(italicPdfFontNameField.getText());
        italic.setTtfFile(italicFontPathField.getText());


        FontDTO boldItalic = new FontDTO();
        boldItalic.setType(FontTypeEnum.BOLD_ITALIC);
        boldItalic.setPdfFontName(boldItalicPdfFontNameField.getText());
        boldItalic.setTtfFile(boldItlFontPathField.getText());


        fontFamilyDTO.fontDTOList.addAll(Arrays.asList(regular, bold, italic, boldItalic));
        fontFamilyDTO.setIsEmbedded(fontPdfEmbedded.isSelected());

        AppContext.newFontFamily=fontFamilyDTO;
        parentFrame.childScreenCallback();
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_okBtnActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void browseBtnItlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnItlActionPerformed
        String newFile = UIUtils.openFileDialog(this);
        if (PropertyUtil.isFileAllowed(newFile, true)) {
            italicFontPathField.setText(newFile);
        }
    }//GEN-LAST:event_browseBtnItlActionPerformed

    private void browseBtnBoldItlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnBoldItlActionPerformed
        String newFile = UIUtils.openFileDialog(this);
        if (PropertyUtil.isFileAllowed(newFile, true)) {
            boldItlFontPathField.setText(newFile);
        }
    }//GEN-LAST:event_browseBtnBoldItlActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FontDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FontDialog(null).setVisible(true);
            }
        });
    }

    private void validateFields(){
        boolean enableOk = (Util.areStringsValid(regFontPathField.getText(), regularPdfFontNameField.getText(), fontFamilyNameFld.getText())
                            && regFontPathField.getText().toLowerCase().endsWith(Constants.FILE_CONSTANTS.TTF_FILE_TYPE.getValue())) ||
                (Util.areStringsValid(boldFontPathField.getText(), boldPdfFontNameField.getText(), fontFamilyNameFld.getText())
                        && boldFontPathField.getText().toLowerCase().endsWith(Constants.FILE_CONSTANTS.TTF_FILE_TYPE.getValue())) ||
                (Util.areStringsValid(italicFontPathField.getText(), italicPdfFontNameField.getText(), fontFamilyNameFld.getText())
                        && italicFontPathField.getText().toLowerCase().endsWith(Constants.FILE_CONSTANTS.TTF_FILE_TYPE.getValue())) ||
                (Util.areStringsValid(boldItlFontPathField.getText(), boldItalicPdfFontNameField.getText(), fontFamilyNameFld.getText())
                        && boldItlFontPathField.getText().toLowerCase().endsWith(Constants.FILE_CONSTANTS.TTF_FILE_TYPE.getValue()));

        this.okBtn.setEnabled(enableOk);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField boldFontPathField;
    private javax.swing.JTextField boldItalicPdfFontNameField;
    private javax.swing.JTextField boldItlFontPathField;
    private javax.swing.JTextField boldPdfFontNameField;
    private javax.swing.JButton browseBtnBold;
    private javax.swing.JButton browseBtnBoldItl;
    private javax.swing.JButton browseBtnItl;
    private javax.swing.JButton browseBtnReg;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField fontFamilyNameFld;
    private javax.swing.JCheckBox fontPdfEmbedded;
    private javax.swing.JTextField italicFontPathField;
    private javax.swing.JTextField italicPdfFontNameField;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton okBtn;
    private javax.swing.JTextField regFontPathField;
    private javax.swing.JTextField regularPdfFontNameField;
    // End of variables declaration//GEN-END:variables
}
